colnames(data)
colnames(data)
# Fit a Lasso model
lasso_model <- cv.glmnet(X_train, y_train, alpha = 1)  # alpha=1 for Lasso, alpha=0 for Ridge
coef(lasso_model)
# data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data <- stream_in(file("data/Curated/FICS_INDIVIDUAL.ndjson"))
data$opening <- factor(data$opening)
data$result <- factor(data$result)
data$is_white <- factor(data$is_white)
data_clean <- na.omit(data)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening +
result +
stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
is_white, data = data_clean)[,-1] # Removing intercept
y <- data_clean$elo
set.seed(10)
train_indices <- sample(1:nrow(X), 20000)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
colnames(X)
# data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data <- stream_in(file("data/Curated/FICS_INDIVIDUAL.ndjson"))
data$opening <- factor(data$opening)
data$result <- factor(data$result)
data$is_white <- factor(data$is_white)
data_clean <- na.omit(data)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening +
result +
stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
is_white, data = data_clean)[,-1] # Removing intercept
y <- data_clean$elo
set.seed(10)
train_indices <- sample(1:nrow(X), 20000)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
lm_model <- lm(y ~ X)
summary(lm_model1)
lm_model1 <- lm(y ~ X)
summary(lm_model1)
lm_model1 <- lm(elo ~ opening + result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = data_clean)
lm_model2 <- lm(elo ~ result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = data_clean)
anova(lm_model1, lm_model2)
anova(lm_model2, lm_model1)
lm_model1$coefficients
lm_model1 <- lm(elo ~ opening + result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = data_clean)
lm_model2 <- lm(elo ~ opening + result + stockfish_mean + I(stockfish_mean)^2 +
stockfish_min +
stockfish_max + stockfish_std + maia_mean + I(maia_mean)^2maia_min +
lm_model1 <- lm(elo ~ opening + result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = data_clean)
lm_model2 <- lm(elo ~ opening + result + stockfish_mean + I(stockfish_mean)^2 +
stockfish_min +
stockfish_max + stockfish_std + maia_mean + I(maia_mean)^2 + maia_min +
maia_max + maia_std + is_white, data = data_clean)
anova(lm_model1, lm_model2)
anova(lm_model1, lm_model2)
lm_model1 <- lm(elo ~ opening + result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = data_clean)
lm_model2 <- lm(elo ~ opening + result + stockfish_mean + I(stockfish_mean^2) +
stockfish_min + stockfish_max + stockfish_std + maia_mean + I(maia_mean^2) + maia_min +
maia_max + maia_std + is_white, data = data_clean)
anova(lm_model1, lm_model2)
lm_model1 <- lm(elo ~ opening + result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = data_clean)
lm_model2 <- lm(elo ~ (opening + result + stockfish_mean + I(stockfish_mean^2) +
stockfish_min + stockfish_max + stockfish_std + maia_mean + I(maia_mean^2) + maia_min +
maia_max + maia_std + is_white)^2, data = data_clean)
# data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data <- stream_in(file("data/Curated/FICS_INDIVIDUAL.ndjson"))
setwd("C:/pc_coding/Finding-Elo")
# data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data <- stream_in(file("data/Curated/FICS_INDIVIDUAL.ndjson"))
library(dplyr)
library(jsonlite)
library(glmnet)
# data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data <- stream_in(file("data/Curated/FICS_INDIVIDUAL.ndjson"))
data$opening <- factor(data$opening)
data$result <- factor(data$result)
data$is_white <- factor(data$is_white)
data_clean <- na.omit(data)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening +
result +
stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
is_white, data = data_clean)[,-1] # Removing intercept
y <- data_clean$elo
set.seed(10)
train_indices <- sample(1:nrow(X), 20000)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
lm_model1 <- lm(elo ~ opening + result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = data_clean)
stepwise_backward <- step(lm_model1, direction = "backward", trace = 0)
lm_model1 <- lm(elo ~ opening + result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = data_clean)
lm_model2 <- step(lm_model1)
anova(lm_model1, lm_model2)
anova(model2)
anova(lm_model2)
plot(lm_model2)
lm_model3 <- lm(elo ~ opening + result + stockfish_mean + I(stockfish_mean^2) +
stockfish_min + stockfish_max + stockfish_std + maia_mean + I(maia_mean^2) + maia_min +
maia_max + maia_std + is_white, data = data_clean)
lm_model3 <- lm(elo ~ opening + result + stockfish_mean + I(stockfish_mean^2) +
stockfish_min + stockfish_max + stockfish_std + maia_mean + I(maia_mean^2) + maia_min +
maia_max + maia_std + is_white, data = data_clean)
lm_model4 <- step(lm_model3)
anova(lm_model4, lm_model2)
plot(model4)
anova(model4)
summary(model4)
summary(mode2)
anova(lm_model4)
summary(lm_model4)
anova(lm_model4)
# data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data <- stream_in(file("data/Curated/FICS_INDIVIDUAL.ndjson"))
data$opening <- factor(data$opening)
data$result <- factor(data$result)
data$is_white <- factor(data$is_white)
data_clean <- na.omit(data)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening +
result +
stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
is_white, data = data_clean)[,-1] # Removing intercept
y <- data_clean$elo
set.seed(10)
train_indices <- sample(1:nrow(X), 20000)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
data_train <- data_clean[train_indices, ]
data_test <- data_clean[-train_indices, ]
lm_model3 <- lm(elo ~ opening + result + stockfish_mean + I(stockfish_mean^2) +
stockfish_min + stockfish_max + stockfish_std + maia_mean + I(maia_mean^2) + maia_min +
maia_max + maia_std + is_white, data = data_train)
lm_model4 <- step(lm_model3)
plot(model4)
anova(lm_model4)
summary(lm_model4)
anova(lm_model4)
predictions <- predict(lm_model4, newdata = data_test)
predictions <- predict(lm_model4, newdata = data_test)
predictions <- predict(lm_model4, newdata = data_test)
predictions <- predict(lm_model4, newdata = data_test)
# data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data <- stream_in(file("data/Curated/FICS_INDIVIDUAL.ndjson"))
data$opening <- factor(data$opening)
data$result <- factor(data$result)
data$is_white <- factor(data$is_white)
data_clean <- na.omit(data)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening +
result +
stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
is_white, data = data_clean)[,-1] # Removing intercept
y <- data_clean$elo
set.seed(10)
train_indices <- sample(1:nrow(X), 22000)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
data_train <- data_clean[train_indices, ]
data_test <- data_clean[-train_indices, ]
colnames(data)
# Fit a Lasso model
lasso_model <- cv.glmnet(X_train, y_train, alpha = 1)  # alpha=1 for Lasso, alpha=0 for Ridge
coef(lasso_model)
lasso_pred <- predict(lasso_model, alpha = 1, newx = X_test)
mse_test <- mean((lasso_pred - y_test)^2)
mae_test <- sqrt(mse_test)
print(mse_test)
print(mae_test)
lasso_pred <- predict(lasso_model, alpha = 1, newx = X_test)
mse_test <- mean((lasso_pred - y_test)^2)
mae_test <- sqrt(mse_test)
print(mse_test)
print(mae_test)
library(dplyr)
library(jsonlite)
library(glmnet)
# data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data <- stream_in(file("data/Curated/FICS_INDIVIDUAL.ndjson"))
data$opening <- factor(data$opening)
data$result <- factor(data$result)
data$is_white <- factor(data$is_white)
data_clean <- na.omit(data)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening +
result +
stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
is_white, data = data_clean)[,-1] # Removing intercept
y <- data_clean$elo
set.seed(10)
train_indices <- sample(1:nrow(X), 22000)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
data_train <- data_clean[train_indices, ]
data_test <- data_clean[-train_indices, ]
colnames(data)
# Fit a Lasso model
lasso_model <- cv.glmnet(X_train, y_train, alpha = 1)  # alpha=1 for Lasso, alpha=0 for Ridge
coef(lasso_model)
lasso_pred <- predict(lasso_model, alpha = 1, newx = X_test)
mse_test <- mean((lasso_pred - y_test)^2)
mae_test <- sqrt(mse_test)
print(mse_test)
print(mae_test)
lm_model1 <- lm(elo ~ opening + result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = data_train)
lm_model2 <- step(lm_model1)
plot(lm_model2)
lm_model3 <- lm(elo ~ opening + result + stockfish_mean + I(stockfish_mean^2) +
stockfish_min + stockfish_max + stockfish_std + maia_mean + I(maia_mean^2) + maia_min +
maia_max + maia_std + is_white, data = data_train)
lm_model4 <- step(lm_model3)
plot(model4)
anova(lm_model4, lm_model2)
anova(lm_model4)
summary(lm_model4)
predictions <- predict(lm_model4, newdata = data_test)
# Combine new levels into an "Other" category
levels_train <- levels(data_train$opening)
data_test$opening <- factor(data_test$opening, levels = c(levels_train, "Other"))
# Set any new levels to "Other"
data_test$opening[!(data_test$opening %in% levels_train)] <- "Other"
predictions <- predict(lm_model4, newdata = data_test)
anova(lm_model4)
# Combine new levels into an "Other" category
levels_train <- levels(data_train$opening)
data_test$opening <- factor(data_test$opening, levels = c(levels_train, "Other"))
# Set any new levels to "Other"
data_test$opening[!(data_test$opening %in% levels_train)] <- "Other"
predictions <- predict(lm_model4, newdata = data_test)
# Combine new levels into an "Other" category
levels_train <- levels(data_train$opening)
data_test$opening <- factor(data_test$opening, levels = c(levels_train, "Other"))
# Set any new levels to "Other"
data_test$opening[!(data_test$opening %in% levels_train)] <- "Other"
predictions <- predict(lm_model4, newdata = data_test)
unique(data_test$opening)
unique(data_train$opening)
# Get the levels from the training data
levels_train <- levels(data_train$opening)
# Identify rows in test_data with new levels
new_levels_rows <- !data_test$opening %in% levels_train
# View the rows with new levels
head(data_test[new_levels_rows, ])
new_levels_rows
# Get the levels from the training data
levels_train <- levels(data_train$opening)
# Identify rows in test_data with new levels
new_levels_rows <- !data_test$opening %in% levels_train
# View the rows with new levels
head(data_test[new_levels_rows, ])
library(dplyr)
library(jsonlite)
library(glmnet)
# data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data <- stream_in(file("data/Curated/FICS_INDIVIDUAL.ndjson"))
data$opening <- factor(data$opening)
data$result <- factor(data$result)
data$is_white <- factor(data$is_white)
data_clean <- na.omit(data)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening +
result +
stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
is_white, data = data_clean)[,-1] # Removing intercept
y <- data_clean$elo
set.seed(10)
train_indices <- sample(1:nrow(X), 22000)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
data_train <- data_clean[train_indices, ]
data_test <- data_clean[-train_indices, ]
colnames(data)
# Fit a Lasso model
lasso_model <- cv.glmnet(X_train, y_train, alpha = 1)  # alpha=1 for Lasso, alpha=0 for Ridge
coef(lasso_model)
lasso_pred <- predict(lasso_model, alpha = 1, newx = X_test)
mse_test <- mean((lasso_pred - y_test)^2)
mae_test <- sqrt(mse_test)
print(mse_test)
print(mae_test)
lm_model1 <- lm(elo ~ opening + result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = data_train)
lm_model2 <- step(lm_model1)
plot(lm_model2)
lm_model3 <- lm(elo ~ opening + result + stockfish_mean + I(stockfish_mean^2) +
stockfish_min + stockfish_max + stockfish_std + maia_mean + I(maia_mean^2) + maia_min +
maia_max + maia_std + is_white, data = data_train)
lm_model4 <- step(lm_model3)
plot(model4)
anova(lm_model4, lm_model2)
anova(lm_model4)
summary(lm_model4)
# Get the levels from the training data
levels_train <- levels(data_train$opening)
# Identify rows in test_data with new levels
new_levels_rows <- !data_test$opening %in% levels_train
# View the rows with new levels
head(data_test[new_levels_rows, ])
predictions <- predict(lm_model4, newdata = data_test)
levels_train
test_data_clean <- data_test[!new_levels_rows, ]
predictions <- predict(lm_model4, newdata = test_data_clean)
predictions <- predict(lm_model4, newdata = test_data_clean)
lm_model1 <- lm(y_train ~ opening + result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = X_train)
X_train
lm_model1 <- lm(y_train ~ X, data = X_train)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening +
result +
stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
is_white, data = data_clean)[,-1] # Removing intercept
y <- data_clean$elo
set.seed(10)
train_indices <- sample(1:nrow(X), 22000)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
lm_model1 <- lm(y_train ~ X_train)
lm_model2 <- step(lm_model1)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening + result + I(stockfish_mean^2) + I(maia_mean^2) +
stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
is_white, data = data_clean)[,-1] # Removing intercept
y <- data_clean$elo
set.seed(10)
train_indices <- sample(1:nrow(X), 22000)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
lm_model3 <- lm(y_train ~ X_train)
lm_model4 <- step(lm_model3)
plot(model4)
anova(lm_model4, lm_model2)
anova(lm_model4)
# summary(lm_model4)
predictions <- predict(lm_model4, newdata = X_test)
test_data <- as.data.frame(X_test)
predictions <- predict(lm_model4, newdata = test_data)
str(X_train)
str(test_data)
library(Metrics)
install.packages(Metrics)
install.packages("Metrics")
library(Metrics)
# Calculate MSE and MAE using Metrics package
mse <- mse(y_test, predictions)
mae <- mae(y_test, predictions)
# Print results
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
length(predictions)
length(y_test)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening + result + I(stockfish_mean^2) + I(maia_mean^2) +
stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
is_white, data = data_clean)[,-1] # Removing intercept
y <- data_clean$elo
set.seed(10)
train_indices <- sample(1:nrow(X), 22000)
X_train <- X[train_indices, ]
y_train <- y[train_indices]
X_test <- X[-train_indices, ]
y_test <- y[-train_indices]
dim(X_train)
dim(X_test)
dim(test_data)
dim(predictions)
length(predictions)
length(test_data)
dim(test_data)
head(test_data)
head(predictions)
library(Metrics)
length(predictions)
length(y_test)
# Calculate MSE and MAE using Metrics package
mse <- mse(y_test, predictions)
mae <- mae(y_test, predictions)
# Print results
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
# data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data <- stream_in(file("data/Curated/FICS_INDIVIDUAL.ndjson"))
data$opening <- factor(data$opening)
data$result <- factor(data$result)
data$is_white <- factor(data$is_white)
data_clean <- na.omit(data)
set.seed(10)
train_indices <- sample(1:nrow(X), 22000)
data_train <- data_clean[train_indices, ]
data_test <- data_clean[-train_indices, ]
# Add a new level "Unknown" to the opening factor in the training data
data_train$opening <- factor(data_train$opening, levels = c(levels(data_train$opening), "Unknown"))
# For any unseen levels in the test data, convert them to "Unknown"
data_test$opening <- factor(data_test$opening, levels = levels(data_train$opening))
data_test$opening[is.na(data_test$opening)] <- "Unknown"
lm_model1 <- lm(y_train ~ opening + result + stockfish_mean + stockfish_min +
stockfish_max + stockfish_std + maia_mean + maia_min +
maia_max + maia_std + is_white, data = data_train)
lm_model2 <- step(lm_model1)
plot(lm_model2)
lm_model3 <- lm(elo ~ opening + result + stockfish_mean + I(stockfish_mean^2) +
stockfish_min + stockfish_max + stockfish_std + maia_mean + I(maia_mean^2) + maia_min +
maia_max + maia_std + is_white, data = data_train)
lm_model4 <- step(lm_model3)
plot(model4)
anova(lm_model4, lm_model2)
anova(lm_model4)
# summary(lm_model4)
# Now you can use the model to predict
predictions <- predict(lm_model4, newdata = data_test)
# Now you can use the model to predict
predictions <- predict(lm_model4, newdata = data_test)
# Only keep rows in the test set where the opening exists in the training set
data_test2 <- subset(data_test, opening %in% levels(data_train$opening))
# Now you can use the model to predict
predictions <- predict(lm_model4, newdata = data_test2)
unique(data_train$opening)
unique(data_test$opening)
# Load dplyr package
library(dplyr)
# Assuming your data frame is called 'chess_data'
result <- data_test %>%
filter(openings == "two knights")
# Load dplyr package
library(dplyr)
# Assuming your data frame is called 'chess_data'
result <- data_test %>%
filter(opening == "two knights")
# View the result
print(result)
# Only keep rows in the test set where the opening exists in the training set
data_test2 <- subset(data_test, opening %in% levels(data_train$opening))
data_test2 <- data_test %>% filter(openings != "two knights")
# Only keep rows in the test set where the opening exists in the training set
data_test2 <- subset(data_test, opening %in% levels(data_train$opening))
data_test2 <- data_test %>% filter(opening != "two knights")
# Now you can use the model to predict
predictions <- predict(lm_model4, newdata = data_test2)
# Now you can use the model to predict
predictions <- predict(lm_model4, newdata = data_test2)
dim(predictions)
length(predictions)
# Proceed with your evaluation (e.g., MSE and MAE)
actual_values <- data_test2$elo
mse <- mean((predictions - actual_values)^2)
mae <- mean(abs(predictions - actual_values))
# Print results
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
lm_model5 <- lm(elo ~ result + stockfish_mean + I(stockfish_mean^2) +
stockfish_min + stockfish_max + stockfish_std + maia_mean + I(maia_mean^2) + maia_min +
maia_max + maia_std + is_white, data = data_train)
lm_model6 <- step(lm_model3)
lm_model6 <- step(lm_model5)
predictions <- predict(lm_model6, newdata = data_test2)
# Proceed with your evaluation (e.g., MSE and MAE)
actual_values <- data_test2$elo
mse <- mean((predictions - actual_values)^2)
mae <- mean(abs(predictions - actual_values))
# Print results
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
