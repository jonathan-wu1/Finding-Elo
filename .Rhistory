# Extract the time series for the j-th station
y_j <- weather_data[, 3 + j]
centered_data <- y_j - mean(y_j) # centering the data
aic <- numeric()
bic <- numeric()
# Initialize vectors to store AIC and BIC values for different orders
aic_station <- numeric()
bic_station <- numeric()
# Loop over different orders p from 1 to 15
for (p in 1:15) {
# Fit AR(p) model using arima
model <- arima(centered_data, order = c(p, 0, 0), include.mean = FALSE)
# Compute AIC and BIC
aic_station[p] <- AIC(model, p)
bic_station[p] <- BIC(model, p)
aic[p] <- -2*model$loglik + 2*(p)
bic[p] <- -2*model$loglik + (p)*log(length(centered_data))
}
# Store the AIC and BIC values for the current station
aic_values[[j]] <- aic_station
bic_values[[j]] <- bic_station
aic_manual[[j]] <- aic
bic_manual[[j]] <- bic
}
# Initialize lists to store AIC and BIC values for each station
aic_values <- list()
bic_values <- list()
aic_manual <- list()
bic_manual <- list()
# Loop over each station (column) in the weather data
for (j in 1:17) {
# Extract the time series for the j-th station
y_j <- weather_data[, 3 + j]
centered_data <- y_j - mean(y_j) # centering the data
aic <- numeric()
bic <- numeric()
# Initialize vectors to store AIC and BIC values for different orders
aic_station <- numeric()
bic_station <- numeric()
# Loop over different orders p from 1 to 15
for (p in 1:15) {
# Fit AR(p) model using arima
model <- arima(centered_data, order = c(p, 0, 0), include.mean = FALSE)
# Compute AIC and BIC
aic_station[p] <- AIC(model, p)
bic_station[p] <- BIC(model, p)
aic[p] <- -2*model$loglik + 2*p
bic[p] <- -2*model$loglik + p*log(length(centered_data))
}
# Store the AIC and BIC values for the current station
aic_values[[j]] <- aic_station
bic_values[[j]] <- bic_station
aic_manual[[j]] <- aic
bic_manual[[j]] <- bic
}
# Initialize lists to store AIC and BIC values for each station
aic_values <- list()
bic_values <- list()
aic_manual <- list()
bic_manual <- list()
# Loop over each station (column) in the weather data
for (j in 1:17) {
# Extract the time series for the j-th station
y_j <- weather_data[, 3 + j]
centered_data <- y_j - mean(y_j) # centering the data
aic <- numeric()
bic <- numeric()
# Initialize vectors to store AIC and BIC values for different orders
aic_station <- numeric()
bic_station <- numeric()
# Loop over different orders p from 1 to 15
for (p in 1:15) {
# Fit AR(p) model using arima
model <- arima(centered_data, order = c(p, 0, 0), include.mean = FALSE)
# Compute AIC and BIC
aic_station[p] <- AIC(model, k=p)
bic_station[p] <- BIC(model)
aic[p] <- -2*model$loglik + 2*p
bic[p] <- -2*model$loglik + p*log(length(centered_data))
}
# Store the AIC and BIC values for the current station
aic_values[[j]] <- aic_station
bic_values[[j]] <- bic_station
aic_manual[[j]] <- aic
bic_manual[[j]] <- bic
}
# [1] -323.2271 -359.6768 -362.0988 -360.8532 -360.4759 -358.5030 -356.7328 -355.5589 -354.0528
# [10] -353.1394 -351.5571 -351.7878 -351.7409 -350.0283 -348.5396
# [1] -321.2271 -357.6768 -360.0988 -358.8532 -358.4759 -356.5030 -354.7328 -353.5589 -352.0528
# [10] -351.1394 -349.5571 -349.7878 -349.7409 -348.0283 -346.5396
#
# The AIC and BIC values are now stored in aic_values and bic_values
# Set up the plotting area for AIC values
plot(NULL, xlim = c(1, 15), ylim = range(unlist(bic_manual)),
xlab = "Order p", ylab = "AIC",
main = "AIC Values for All Weather Stations")
colors <- rainbow(17)
# Plot AIC values for each station
for (j in 1:17) {
lines(1:15, bic_manual[[j]], type = "b", col = colors[j], lwd = 2, pch = 16)
}
# Optionally, add a legend to identify each station by color
legend("topright", legend = paste(stations$name[1:17]), col = colors, lty = 1, lwd = 2, pch = 16, cex = 0.8)
# Set up the plotting area for BIC values
plot(NULL, xlim = c(1, 15), ylim = range(unlist(bic_values)),
xlab = "Order p", ylab = "BIC",
main = "BIC Values for All Weather Stations")
# Plot BIC values for each station
for (j in 1:17) {
lines(1:15, bic_values[[j]], type = "b", col = colors[j], lwd = 2, pch = 16)
}
# Optionally, add a legend to identify each station by color
legend("topright", legend = paste(stations$name[1:17]), col = colors, lty = 1, lwd = 2, pch = 16, cex = 0.8)
# Initialize lists to store AIC and BIC values for each station
aic_values <- list()
bic_values <- list()
aic_manual <- list()
bic_manual <- list()
# Loop over each station (column) in the weather data
for (j in 1:17) {
# Extract the time series for the j-th station
y_j <- weather_data[, 3 + j]
centered_data <- y_j - mean(y_j) # centering the data
aic <- numeric()
bic <- numeric()
# Initialize vectors to store AIC and BIC values for different orders
aic_station <- numeric()
bic_station <- numeric()
# Loop over different orders p from 1 to 15
for (p in 1:15) {
# Fit AR(p) model using arima
model <- arima(centered_data, order = c(p, 0, 0), include.mean = FALSE)
# Compute AIC and BIC
aic_station[p] <- AIC(model, k=p)
bic_station[p] <- BIC(model, k=p)
aic[p] <- -2*model$loglik + 2*p
bic[p] <- -2*model$loglik + p*log(length(centered_data))
}
# Store the AIC and BIC values for the current station
aic_values[[j]] <- aic_station
bic_values[[j]] <- bic_station
aic_manual[[j]] <- aic
bic_manual[[j]] <- bic
}
aic
aic[p] <- -2*model$loglik + 2*p
bic[p] <- -2*model$loglik + p*log(length(centered_data))
aic
aic
# Initialize lists to store AIC and BIC values for each station
aic_values <- list()
bic_values <- list()
aic_manual <- list()
bic_manual <- list()
# Loop over each station (column) in the weather data
for (j in 1:17) {
# Extract the time series for the j-th station
y_j <- weather_data[, 3 + j]
centered_data <- y_j - mean(y_j) # centering the data
aic <- numeric()
bic <- numeric()
# Initialize vectors to store AIC and BIC values for different orders
aic_station <- numeric()
bic_station <- numeric()
# Loop over different orders p from 1 to 15
for (p in 1:15) {
# Fit AR(p) model using arima
model <- arima(centered_data, order = c(p, 0, 0), include.mean = FALSE)
# Compute AIC and BIC
aic_station[p] <- AIC(model, k=p)
bic_station[p] <- BIC(model)
aic[p] <- -2*model$loglik + 2*p
bic[p] <- -2*model$loglik + p*log(length(centered_data))
}
aic
aic_station
# Store the AIC and BIC values for the current station
aic_values[[j]] <- aic_station
bic_values[[j]] <- bic_station
aic_manual[[j]] <- aic
bic_manual[[j]] <- bic
}
# [1] -323.2271 -359.6768 -362.0988 -360.8532 -360.4759 -358.5030 -356.7328 -355.5589 -354.0528
# [10] -353.1394 -351.5571 -351.7878 -351.7409 -350.0283 -348.5396
# [1] -321.2271 -357.6768 -360.0988 -358.8532 -358.4759 -356.5030 -354.7328 -353.5589 -352.0528
# [10] -351.1394 -349.5571 -349.7878 -349.7409 -348.0283 -346.5396
#
# The AIC and BIC values are now stored in aic_values and bic_values
aic
aic_station
aic
aic
aic_station
# Initialize lists to store AIC and BIC values for each station
aic_values <- list()
bic_values <- list()
aic_manual <- list()
bic_manual <- list()
# Loop over each station (column) in the weather data
for (j in 1:17) {
# Extract the time series for the j-th station
y_j <- weather_data[, 3 + j]
centered_data <- y_j - mean(y_j) # centering the data
aic <- numeric()
bic <- numeric()
# Initialize vectors to store AIC and BIC values for different orders
aic_station <- numeric()
bic_station <- numeric()
# Loop over different orders p from 1 to 15
for (p in 1:15) {
# Fit AR(p) model using arima
model <- arima(centered_data, order = c(p, 0, 0), include.mean = FALSE)
# Compute AIC and BIC
aic_station[p] <- AIC(model, k=2)
bic_station[p] <- BIC(model)
aic[p] <- -2*model$loglik + 2*p
bic[p] <- -2*model$loglik + p*log(length(centered_data))
}
aic
aic_station
# Store the AIC and BIC values for the current station
aic_values[[j]] <- aic_station
bic_values[[j]] <- bic_station
aic_manual[[j]] <- aic
bic_manual[[j]] <- bic
}
# [1] -323.2271 -359.6768 -362.0988 -360.8532 -360.4759 -358.5030 -356.7328 -355.5589 -354.0528
# [10] -353.1394 -351.5571 -351.7878 -351.7409 -350.0283 -348.5396
# [1] -321.2271 -357.6768 -360.0988 -358.8532 -358.4759 -356.5030 -354.7328 -353.5589 -352.0528
# [10] -351.1394 -349.5571 -349.7878 -349.7409 -348.0283 -346.5396
#
# The AIC and BIC values are now stored in aic_values and bic_values
aic
aic_station
aic
aic_station
aic
aic_station
a=bic
bic
bic
bic_station
bic
bic_station
bic
bic_station
bic
bic_station
bic
bic_station
bic
# Initialize lists to store AIC and BIC values for each station
aic_values <- list()
bic_values <- list()
# Loop over each station (column) in the weather data
for (j in 1:17) {
# Extract the time series for the j-th station
y_j <- weather_data[, 3 + j]
centered_data <- y_j - mean(y_j) # centering the data
aic <- numeric()
bic <- numeric()
# Initialize vectors to store AIC and BIC values for different orders
aic_station <- numeric()
bic_station <- numeric()
# Loop over different orders p from 1 to 15
for (p in 1:15) {
# Fit AR(p) model using arima
model <- arima(centered_data, order = c(p, 0, 0), include.mean = FALSE)
# Compute AIC and BIC
aic_station[p] <- AIC(model)
bic_station[p] <- BIC(model)
}
# Store the AIC and BIC values for the current station
aic_values[[j]] <- aic_station
bic_values[[j]] <- bic_station
}
# [1] -320.2032 -353.6290 -353.0271 -348.7577 -345.3565 -340.3597 -335.5657 -331.3678 -326.8379
# [10] -322.9006 -318.2944 -315.5012 -312.4304 -307.6940 -303.1813
# [1] -315.1793 -348.6051 -348.0032 -343.7338 -340.3326 -335.3358 -330.5418 -326.3439 -321.8140
# [10] -317.8767 -313.2705 -310.4773 -307.4066 -302.6701 -298.1575
#
# The AIC and BIC values are now stored in aic_values and bic_values
# Set up the plotting area for AIC values
plot(NULL, xlim = c(1, 15), ylim = range(unlist(aic_values)),
xlab = "Order p", ylab = "AIC",
main = "AIC Values for All Weather Stations")
# Define a color palette
colors <- rainbow(17)
# Plot AIC values for each station
for (j in 1:17) {
lines(1:15, aic_values[[j]], type = "b", col = colors[j], lwd = 2, pch = 16)
}
# Optionally, add a legend to identify each station by color
legend("topright", legend = paste("Station", 1:17), col = colors, lty = 1, lwd = 2, pch = 16, cex = 0.8)
# Set up the plotting area for BIC values
plot(NULL, xlim = c(1, 15), ylim = range(unlist(bic_values)),
xlab = "Order p", ylab = "BIC",
main = "BIC Values for All Weather Stations")
# Plot BIC values for each station
for (j in 1:17) {
lines(1:15, bic_values[[j]], type = "b", col = colors[j], lwd = 2, pch = 16)
}
# Optionally, add a legend to identify each station by color
legend("topright", legend = paste("Station", 1:17), col = colors, lty = 1, lwd = 2, pch = 16, cex = 0.8)
# Set up the plotting area for AIC values
plot(NULL, xlim = c(1, 15), ylim = range(unlist(aic_values)),
xlab = "Order p", ylab = "AIC",
main = "AIC Values for All Weather Stations")
# Define a color palette
colors <- rainbow(17)
# Plot AIC values for each station
for (j in 1:17) {
lines(1:15, aic_values[[j]], type = "b", col = colors[j], lwd = 2, pch = 16)
}
# Optionally, add a legend to identify each station by color
legend("topright", legend = paste(geoinfo$name[1:17]), col = colors, lty = 1, lwd = 2, pch = 16, cex = 0.8)
# Load necessary libraries
library(stats)
weather_data <- read.csv("weather_data.csv")
geoinfo <- read.csv("geoinfo_stations.csv")
head(weather_data, 2)
# Set up the plotting area for AIC values
plot(NULL, xlim = c(1, 15), ylim = range(unlist(aic_values)),
xlab = "Order p", ylab = "AIC",
main = "AIC Values for All Weather Stations")
# Define a color palette
colors <- rainbow(17)
# Plot AIC values for each station
for (j in 1:17) {
lines(1:15, aic_values[[j]], type = "b", col = colors[j], lwd = 2, pch = 16)
}
# Optionally, add a legend to identify each station by color
legend("topright", legend = paste(geoinfo$name[1:17]), col = colors, lty = 1, lwd = 2, pch = 16, cex = 0.8)
# Set up the plotting area for BIC values
plot(NULL, xlim = c(1, 15), ylim = range(unlist(bic_values)),
xlab = "Order p", ylab = "BIC",
main = "BIC Values for All Weather Stations")
# Plot BIC values for each station
for (j in 1:17) {
lines(1:15, bic_values[[j]], type = "b", col = colors[j], lwd = 2, pch = 16)
}
# Optionally, add a legend to identify each station by color
legend("topright", legend = paste(geoinfo$name[1:17]), col = colors, lty = 1, lwd = 2, pch = 16, cex = 0.8)
head(geoinfo, 2)
head(geoinfo, 2)
n_stations <- length(geoinfo)
n_stations <- length(geoinfo)
n_stations <- length(geoinfo), n_stations
head(geoinfo, 2)
n_stations <- length(geoinfo), n_stations
head(geoinfo, 2)
n_stations <- length(geoinfo); n_stations
head(geoinfo, 2)
n_stations <- length(geoinfo$name); n_stations
# Define the column names and read in data
column_names <- c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8")
data <- read.table("Wheat data-3.txt", header = FALSE, col.names = column_names)
data$X8 <- factor(data$X8)
X <- data[,1:7]
group <- data[,8]
PCX=prcomp(X,retx=T)
gamma=PCX$rotation
lambda=PCX$sdev^2
round(lambda/sum(lambda), 4)
cumsum(lambda)/sum(lambda)
screeplot(PCX, type = "lines")
# Define the column names and read in data
column_names <- c("Area", "Perimeter", "Compactness", "Length of kernel", "Width of kernel", "Asymmetry coefficient", "Length of kernel groove", "Variety")
data <- read.table("Wheat data-3.txt", header = FALSE, col.names = column_names)
data$X8 <- factor(data$X8)
# Define the column names and read in data
column_names <- c("Area", "Perimeter", "Compactness", "Length of kernel", "Width of kernel", "Asymmetry coefficient", "Length of kernel groove", "Variety")
data <- read.table("Wheat data-3.txt", header = FALSE, col.names = column_names)
data$Variety <- factor(data$Variety)
X <- data[,1:7]
group <- data[,8]
PCX=prcomp(X,retx=T)
gamma=PCX$rotation
lambda=PCX$sdev^2
PCX=prcomp(X,retx=T)
gamma=PCX$rotation
lambda=PCX$sdev^2
round(lambda/sum(lambda), 4)
cumsum(lambda)/sum(lambda)
screeplot(PCX, type = "lines")
gamma[,1:2]
# Define the column names and read in data
column_names <- c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8")
data <- read.table("Wheat data-3.txt", header = FALSE, col.names = column_names)
data$X8 <- factor(data$X8)
X <- data[,1:7]
group <- data[,8]
sigma <- diag(1/sqrt(((gamma^2) %*% lambda)[,1]))
corr <- sigma %*% gamma[,1:2] %*% diag(sqrt(lambda[1:2]))
corr_matrix <- corr_matrix[, c(1, 2)]
sigma <- diag(1/sqrt(((gamma^2) %*% lambda)[,1]))
corr_matrix <- sigma %*% gamma[,1:2] %*% diag(sqrt(lambda[1:2]))
corr_matrix <- corr_matrix[, c(1, 2)]
colnames(corr_matrix) <- c("PC1", "PC2")
rownames(corr_matrix) <- column_names[1:7]
corr_matrix
pairs(X,col=c(2, 3, 4)[data$X8])
PCX <- X %*% gamma
# Define the column names and read in data
column_names <- c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8")
data <- read.table("Wheat data-3.txt", header = FALSE, col.names = column_names)
data$X8 <- factor(data$X8)
X <- as.matrix(data)[,(1:7)]
group <- as.matrix(data)[,8]
PCA=prcomp(X,retx=T)
# Define the column names and read in data
column_names <- c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8")
data <- read.table("Wheat data-3.txt", header = FALSE, col.names = column_names)
data$X8 <- factor(data$X8)
X <- data[,1:7]
group <- data[,8]
PCA=prcomp(X,retx=T)
gamma=PCA$rotation
lambda=PCA$sdev^2
# Define the column names and read in data
column_names <- c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8")
data <- read.table("Wheat data-3.txt", header = FALSE, col.names = column_names)
data$X8 <- factor(data$X8)
X <- as.matrix(data[,1:7])
group <- as.matrix(data[,8])
PCA=prcomp(X,retx=T)
gamma=PCA$rotation
lambda=PCA$sdev^2
setwd("C:/pc_coding/Finding-Elo")
data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
library(dplyr)
library(jsonlite)
library(glmnet)
data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data.colnames
colnames(data)
data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
colnames(data)
data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data$result <- as.factor(data$result)
data$opening <- as.factor(data$Opening)
data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data$result <- as.factor(data$result)
#data$opening <- as.factor(data$Opening)
unique_names <- unique(df$opening)
unique_names <- unique(df$opening); unique_names
unique_names <- unique(data$opening); unique_names
data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data$result <- as.factor(data$result)
data$opening <- as.factor(data$Opening)
sum(is.na(data$Opening))
data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data$result <- as.factor(data$result)
data$opening <- as.factor(data$opening)
model <- lm(elo ~ opening + stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
result + is_white, data = data)
summary(model)
library(dplyr)
library(jsonlite)
library(glmnet)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening + stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
result + is_white, data = data)[,-1] # Removing intercept
y <- data$elo
# Fit a Lasso model
lasso_model <- cv.glmnet(X, y, alpha = 1)  # alpha=1 for Lasso, alpha=0 for Ridge
# Prepare data for glmnet
X <- model.matrix(elo ~ opening + stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
result + is_white, data = data)[,-1] # Removing intercept
y <- data$elo
length(y)
length(X)
dim(X)
dim(y)
length(y)
dim(X)
length(y)
data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data$result <- as.factor(data$result)
data$opening <- as.factor(data$opening)
# Prepare data for glmnet
X <- model.matrix(elo ~ opening + stockfish_mean + stockfish_min + stockfish_max +
stockfish_std + maia_mean + maia_min + maia_max + maia_std +
result + is_white, data = data)[,-1] # Removing intercept
y <- data$elo
dim(X)
length(y)
head(X)
head(X, 1)
summary(data)
data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data$opening <- factor(data$opening)
data$result <- factor(data$result)
data$is_white <- factor(data$is_white)
data_clean <- na.omit(data)
dim(data_clean)
# Find rows with any NA values
rows_with_na <- which(apply(data, 1, function(x) any(is.na(x))))
# Print rows with NA values
print(rows_with_na)
# Display the rows with NA values
data[rows_with_na, ]
library(dplyr)
library(jsonlite)
library(glmnet)
data <- stream_in(file("data/Curated/FIDE_INDIVIDUAL.ndjson"))
data$opening <- factor(data$opening)
data$result <- factor(data$result)
data$is_white <- factor(data$is_white)
